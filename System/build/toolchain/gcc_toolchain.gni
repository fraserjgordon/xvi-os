import("//build/config/global_args.gni")

# Template for toolchains that behave mostly like GCC (e.g. Clang).
template("gcc_toolchain")
{
    assert(defined(invoker.toolchain_arch), "Toolchain architecture must be defined")
    assert(defined(invoker.toolchain_cpu), "Toolchain CPU must be defined")
    assert(defined(invoker.toolchain_os), "Toolchain OS must be defined")
    
    toolchain_arch = invoker.toolchain_arch
    toolchain_cpu = invoker.toolchain_cpu
    toolchain_os = invoker.toolchain_os

    is_host_toolchain = false
    if (defined(invoker.is_host_toolchain))
    {
        is_host_toolchain = invoker.is_host_toolchain
    }

    # Compiler executables.
    if (use_clang)
    {
        cc_exe = "clang"
        cxx_exe = "clang++"
        ar_exe = "llvm-ar"
    }
    else
    {
        cc_exe = "gcc"
        cxx_exe = "g++"
        ar_exe = "ar"
    }

    if (defined(invoker.clang_target))
    {
        clang_target = invoker.clang_target
    }
    else
    {
        clang_target = invoker.toolchain_arch
    }

    if (!use_clang)
    {
        if (defined(invoker.toolchain_prefix))
        {
            cc_exe = "${invoker.toolchain_prefix}${cc_exe}"
            cxx_exe = "${invoker.toolchain_prefix}${cxx_exe}"
            ar_exe = "${invoker.toolchain_prefix}${ar_exe}"
        }

        not_needed(["clang_target"])
    }
    else
    {
        if (defined(invoker.toolchain_prefix))
        {
            toolchain_prefix = invoker.toolchain_prefix
        }
    }

    if (defined(invoker.toolchain_root))
    {
        cc_exe = "${invoker.toolchain_root}/bin/${cc_exe}"
        cxx_exe = "${invoker.toolchain_root}/bin/${cxx_exe}"
        ar_exe = "${invoker.toolchain_root}/bin/${ar_exe}"
    }

    if (defined(invoker.cc_exe))
    {
        cc_exe = invoker.cc_exe
    }

    if (defined(invoker.cxx_exe))
    {
        cxx_exe = invoker.cxx_exe
    }

    if (defined(invoker.ar_exe))
    {
        ar_exe = invoker.ar_exe
    }

    arch_toolchain_args = {}
    if (defined(invoker.arch_toolchain_args))
    {
        arch_toolchain_args = invoker.arch_toolchain_args
    }

    # Mandatory GCC flags (e.g. target architecture options).
    arch_cflags = ""
    arch_ldflags = ""
    arch_soflags = ""
    if (use_clang)
    {
        arch_cflags = "-target ${clang_target}-xvi "

        if (defined(toolchain_prefix) && toolchain_prefix != "${clang_target}-xvi-")
        {
            if (defined(invoker.toolchain_root))
            {
                arch_cflags += "-B ${invoker.toolchain_root}/bin/${toolchain_prefix} "
            }
            else
            {
                arch_cflags += "-B ${toolchain_prefix} "
            }
        }
        else if (defined(invoker.toolchain_root))
        {
            arch_cflags += "-B ${invoker.toolchain_root}/bin "
        }
    }

    if (defined(invoker.arch_cflags))
    {
        arch_cflags += string_join(" ", invoker.arch_cflags)
    }
    if (defined(invoker.arch_ldflags))
    {
        arch_ldflags = string_join(" ", invoker.arch_ldflags)
    }
    if (defined(invoker.arch_soflags))
    {
        arch_soflags = string_join(" ", invoker.arch_soflags)
    }

    # Mandatory Rust flags (e.g. target architecture options).
    arch_rustflags = ""
    if (defined(invoker.arch_rustflags))
    {
        arch_rustflags = string_join(" ", invoker.arch_rustflags)
    }

    toolchain(target_name)
    {
        host_build = is_host_toolchain
        if (toolchain_arch == host_arch && toolchain_cpu == host_cpu && toolchain_os == host_os)
        {
            host_build = true
        }

        toolchain_args =
        {
            current_arch    = toolchain_arch
            current_cpu     = toolchain_cpu
            current_os      = toolchain_os

            if (use_clang)
            {
                compiler_id = "clang"
            }
            else
            {
                compiler_id = "gcc"
            }

            host_build = host_build
            if (host_build)
            {
                toolchain_out_dir = "host"
            }
            else
            {
                toolchain_out_dir = "${toolchain_arch}/${toolchain_cpu}"
            }

            forward_variables_from(arch_toolchain_args, "*")
        }

        default_output_dir = "${toolchain_arch}/${toolchain_cpu}"
        if (host_build)
        {
            default_output_dir = "host"
        }

        tool("cc")
        {
            depfile                 = "{{output}}.d"
            depsformat              = "gcc"
            description             = "CC (${toolchain_cpu}) {{source}}"
            outputs                 = [ "{{target_out_dir}}/{{label_name}}.{{source_file_part}}.o" ]
            precompiled_header_type = "gcc"

            command = "${cc_exe} -MD -MF ${depfile} ${arch_cflags} {{include_dirs}} {{defines}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
        }

        tool("cxx")
        {
            depfile                 = "{{output}}.d"
            depsformat              = "gcc"
            description             = "CXX (${toolchain_cpu}) {{source}}"
            outputs                 = [ "{{target_out_dir}}/{{label_name}}.{{source_file_part}}.o" ]
            precompiled_header_type = "gcc"

            command = "${cxx_exe} -MD -MF ${depfile} ${arch_cflags} {{include_dirs}} {{defines}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
        }

        tool("asm")
        {
            depfile                 = "{{output}}.d"
            depsformat              = "gcc"
            description             = "ASM (${toolchain_cpu}) {{source}}"
            outputs                 = [ "{{target_out_dir}}/{{label_name}}.{{source_file_part}}.o" ]
            precompiled_header_type = "gcc"

            command = "${cc_exe} -MMD -MF ${depfile} ${arch_cflags} {{include_dirs}} {{defines}} {{asmflags}} -c {{source}} -o {{output}}"
        }

        tool("alink")
        {
            default_output_extension= ".a"
            description             = "AR (${toolchain_cpu}) {{target_output_name}}{{output_extension}}"
            outputs                 = [ "{{output_dir}}/{{target_output_name}}{{output_extension}}" ]
            output_prefix           = ""

            rspfile                 = "{{target_out_dir}}/{{target_output_name}}{{output_extension}}.rsp"
            rspfile_content         = "{{inputs}}"
            
            command = "rm -f {{output}} && ${ar_exe} rcsD {{output}} @${rspfile}"
        }

        tool("solink")
        {
            #command_launcher = "gdb -ex r --return-child-result --batch-silent --args"
            
            default_output_extension= ".so"
            description             = "Link (${toolchain_cpu}) (dynamic) {{target_output_name}}{{output_extension}}"
            outputs                 = [ "{{output_dir}}/{{target_output_name}}{{output_extension}}" ]
            output_prefix           = ""

            soname  = "{{target_output_name}}{{output_extension}}"
            soflags = "-Wl,-soname=${soname}"

            rspfile         = "{{target_out_dir}}/${soname}.rsp"
            rspfile_content = "{{inputs}} {{solibs}} {{libs}}"

            command = "${cxx_exe} -shared ${arch_cflags} ${arch_ldflags} ${arch_soflags} ${soflags} {{ldflags}} -o {{output}} @${rspfile}"
        }

        tool("link")
        {
            default_output_extension= ""
            description             = "Link (${toolchain_cpu}) {{target_output_name}}{{output_extension}}"
            outputs                 = [ "{{output_dir}}/{{target_output_name}}{{output_extension}}" ]

            rspfile         = "{{target_out_dir}}/{{target_output_name}}{{output_extension}}.rsp"
            rspfile_content = "{{inputs}} {{solibs}} {{libs}}"

            command = "${cxx_exe} ${arch_cflags} ${arch_ldflags} {{ldflags}} -o {{output}} @${rspfile}"
        }

        tool("stamp")
        {
            description             = "Stamp {{output}}"

            command = "touch {{output}}"
        }

        tool("copy")
        {
            description             = "Copy {{source}} -> {{output}}"

            command = "cp -af {{source}} {{output}}"
        }
        
        tool("rust_bin")
        {
            default_output_extension= ""
            description             = "Rust (${toolchain_cpu}) (bin) {{target_output_name}}{{output_extension}}"
            outputs                 = [ "{{target_out_dir}}/{{target_output_name}}{{output_extension}}" ]

            rspfile                 = "{{target_out_dir}}/{{target_output_name}}{{output_extension}}.rsp"
            rspfile_content         = "{{externs}} {{rustdeps}} {{rustenv}}"

            command = "rustc +nightly ${arch_rustflags} {{rustflags}} --crate-type {{crate_type}} --crate-name {{crate_name}} ${rspfile_content} -o {{output}} {{source}}"
        }

        tool("rust_cdylib")
        {
            default_output_extension= ".so"
            description             = "Rust (${toolchain_cpu}) (cdylib) {{target_output_name}}{{output_extension}}"
            outputs                 = [ "{{target_out_dir}}/{{target_output_name}}{{output_extension}}" ]

            rspfile                 = "{{target_out_dir}}/{{target_output_name}}{{output_extension}}.rsp"
            rspfile_content         = "{{externs}} {{rustdeps}} {{rustenv}}"
            
            command = "rustc +nightly ${arch_rustflags} {{rustflags}} --crate-type {{crate_type}} --crate-name {{crate_name}} ${rspfile_content} -o {{output}} {{source}}"
        }

        tool("rust_dylib")
        {
            default_output_extension= ".so"
            description             = "Rust (${toolchain_cpu}) (dylib) {{target_output_name}}{{output_extension}}"
            outputs                 = [ "{{target_out_dir}}/{{target_output_name}}{{output_extension}}" ]

            rspfile                 = "{{target_out_dir}}/{{target_output_name}}{{output_extension}}.rsp"
            rspfile_content         = "{{externs}} {{rustdeps}} {{rustenv}}"

            command = "rustc +nightly ${arch_rustflags} {{rustflags}} --crate-type {{crate_type}} --crate-name {{crate_name}} ${rspfile_content} -o {{output}} {{source}}"
        }

        tool("rust_macro")
        {
            description             = "Rust (${toolchain_cpu}) (proc macro) {{target_output_name}}{{output_extension}}"
            outputs                 = [ "{{target_out_dir}}/{{target_output_name}}{{output_extension}}" ]

            rspfile                 = "{{target_out_dir}}/{{target_output_name}}{{output_extension}}.rsp"
            rspfile_content         = "{{externs}} {{rustdeps}} {{rustenv}}"

            command = "rustc +nightly ${arch_rustflags} {{rustflags}} --crate-type {{crate_type}} --crate-name {{crate_name}} ${rspfile_content} -o {{output}} {{source}}"
        }

        tool("rust_rlib")
        {
            default_output_extension= ".rlib"
            description             = "Rust (${toolchain_cpu}) (rlib) {{target_output_name}}{{output_extension}}"
            outputs                 = [ "{{target_out_dir}}/{{target_output_name}}{{output_extension}}" ]

            rspfile                 = "{{target_out_dir}}/{{target_output_name}}{{output_extension}}.rsp"
            rspfile_content         = "{{externs}} {{rustdeps}} {{rustenv}}"

            command = "rustc +nightly ${arch_rustflags} {{rustflags}} --crate-type {{crate_type}} --crate-name {{crate_name}} ${rspfile_content} -o {{output}} {{source}}"
        }

        tool("rust_staticlib")
        {
            default_output_extension= ".a"
            description             = "Rust (${toolchain_cpu}) (static lib) {{target_output_name}}{{output_extension}}"
            outputs                 = [ "{{target_out_dir}}/{{target_output_name}}{{output_extension}}" ]

            rspfile                 = "{{target_out_dir}}/{{target_output_name}}{{output_extension}}.rsp"
            rspfile_content         = "{{externs}} {{rustdeps}} {{rustenv}}"

            command = "rustc +nightly ${arch_rustflags} {{rustflags}} --crate-type {{crate_type}} --crate-name {{crate_name}} ${rspfile_content} -o {{output}} {{source}}"
        }
    }
}
