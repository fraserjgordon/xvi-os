# C standard.
config("c11")
{
    cflags_c = ["-std=c11"]
}

# C++ standard.
config("c++20")
{
    cflags_cc = ["-std=c++2a"]
}

# Rust edition.
config("rust_2018")
{
    rustflags = [ "--edition=2018" ]
}

# Warnings required by the XVI coding standard.
config("default_warnings")
{
    cflags =
    [
        "-Wall",
        "-Wextra",
        "-Wnull-dereference",
        "-Wdouble-promotion",
        "-Wformat=2",
        #"-Wconversion",
        "-Wsign-conversion",
    ]

    cflags_c =
    [
        "-Wbad-function-cast",
        "-Wc++-compat",
        "-Wmissing-prototypes",
    ]

    cflags_cc =
    [
        #"-Wuseless-cast",
        "-Wmissing-declarations",
    ]

    asmflags =
    [
        "-Wall",
    ]

    if (compiler_id == "gcc")
    {
        cflags +=
        [
            "-Wduplicated-cond",
            "-Wduplicated-branches",
            "-Wlogical-op",
            "-Wshadow-local",
        ]

        cflags_cc +=
        [
            "-Wimplicit-fallthrough=5",
            "-Wsized-deallocation",
        ]
    }
    else if (compiler_id == "clang")
    {
        cflags_cc +=
        [
            "-Wimplicit-fallthrough",
        ]
    }
}

# Errors required by the XVI coding standard.
config("default_errors")
{
    cflags =
    [
        "-Werror=init-self",
        "-Werror=implicit-fallthrough",
        "-Werror=pointer-arith",
        "-Werror=write-strings",
        "-Werror=date-time",
        "-Werror=alloca",
        "-Werror=missing-declarations",
        "-Werror=return-type",
        ""
    ]

    cflags_c =
    [
        "-Werror=jump-misses-init",
        "-Werror=strict-prototypes",
        "-Werror=old-style-declaration",
        "-Werror=old-style-definition",
    ]

    cflags_cc =
    [
        "-Werror=old-style-cast",
        "-Werror=zero-as-null-pointer-constant",
    ]

    if (compiler_id == "gcc")
    {
        cflags +=
        [
            "-Werror=trampolines",
        ]
    }
    else if (compiler_id == "clang")
    {
        cflags_cc +=
        [
            # Causes problems with the System.ABI.Integer library.
            "-Wno-error=return-type-c-linkage"
        ]
    }
}

# Warnings-as-errors mode.
config("werror")
{
    cflags =
    [
        "-Werror"
    ]
}

# Default code generation options.
config("default_codegen")
{
    cflags =
    [
        "-fno-plt",
        "-fdata-sections",
        "-ffunction-sections",
    ]

    if (compiler_id == "gcc")
    {
        cflags +=
        [
            "-fstack-clash-protection"
        ]
    }
}

# Default debug information options.
config("default_debug_info")
{
    cflags =
    [
        "-gdwarf-5",
        "-g3",
    ]

    ldflags =
    [
        "-gdwarf-5",
        "-g3",
    ]
}

# Appropriate optimisation level for debug builds.
config("optimize_debug")
{
    cflags =
    [
        "-Og",
    ]
}

# Appropriate omptimisation level for release builds.
config("optimize_full")
{
    cflags =
    [
        "-O3",
    ]
}

config("pic")
{
    cflags      = ["-fPIC"]
    ldflags     = ["-fPIC"]
}

config("shared_lib_no_undefined_symbols")
{
    ldflags     = ["-Wl,-z,defs"]
}

config("shared")
{
    configs     = [":pic", ":shared_lib_no_undefined_symbols"]
}

# Don't link to standard include directories.
config("no_stdlib")
{
    cflags      = ["-nostdinc", "-nostdlib"]
    defines     = ["__XVI_NO_STDLIB"]
    ldflags     = ["-nostdlib"]

    #rustflags   =
    #[
    #    "-Z", "crate-attr=no_std",
    #    "-Z", "crate-attr=no_implicit_prelude",
    #]
}

# Don't use compiler built-in functions.
config("no_builtins")
{
    cflags      = ["-fno-builtin"]
}

config("gcc_gc_crash_fix")
{
    if (false && compiler_id == "gcc")
    {
        cflags =
        [
            "--param=ggc-min-expand=100",
            "--param=ggc-min-heapsize=131072",
        ]
    }
}

config("gcc_colour_output")
{
    if (compiler_id == "gcc")
    {
        cflags =
        [
            "-fdiagnostics-color=always",
        ]
    }
    else if (compiler_id == "clang")
    {
        cflags =
        [
            "-fcolor-diagnostics",
        ]
    }
}
