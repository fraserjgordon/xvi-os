#ifndef __SYSTEM_FIRMWARE_EFI_PROTOCOLS_H
#define __SYSTEM_FIRMWARE_EFI_PROTOCOLS_H


#include <System/Firmware/EFI/API.hh>


namespace System::Firmware::EFI
{


// Forward declarations.
struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL;


using EFI_TEXT_RESET = EFIAPI EFI_STATUS (*)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL*, BOOLEAN);
using EFI_TEXT_STRING = EFIAPI EFI_STATUS (*)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL*, const CHAR16*);
using EFI_TEXT_TEST_STRING = EFIAPI EFI_STATUS (*)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL*, const CHAR16*);
using EFI_TEXT_QUERY_MODE = EFIAPI EFI_STATUS (*)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL*, UINTN, UINTN*, UINTN*);
using EFI_TEXT_SET_MODE = EFIAPI EFI_STATUS (*)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL*, UINTN);
using EFI_TEXT_SET_ATTRIBUTE = EFIAPI EFI_STATUS (*)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL*, UINTN);
using EFI_TEXT_CLEAR_SCREEN = EFIAPI EFI_STATUS (*)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL*);
using EFI_TEXT_SET_CURSOR_POSITION = EFIAPI EFI_STATUS (*)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL*, UINTN, UINTN);
using EFI_TEXT_ENABLE_CURSOR = EFIAPI EFI_STATUS (*)(EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL*, BOOLEAN);

struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL
{
    EFI_TEXT_RESET                  Reset;
    EFI_TEXT_STRING                 OutputString;
    EFI_TEXT_TEST_STRING            TestString;
    EFI_TEXT_QUERY_MODE             QueryMode;
    EFI_TEXT_SET_MODE               SetMode;
    EFI_TEXT_SET_ATTRIBUTE          SetAttribute;
    EFI_TEXT_CLEAR_SCREEN           ClearScreen;
    EFI_TEXT_SET_CURSOR_POSITION    SetCursorPosition;
    EFI_TEXT_ENABLE_CURSOR          EnableCursor;
};


}


#endif /* ifndef __SYSTEM_FIRMWARE_EFI_PROTOCOLS_H */
