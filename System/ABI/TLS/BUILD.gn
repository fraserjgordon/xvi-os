import("//build/config/arch/current_arch_config.gni")

library("TLS")
{
    library_name    = "System.ABI.TLS"
    library_version = "0.1.0"

    use_stdlib = false

    shared_define = "__SYSTEM_ABI_TLS_BUILD_SHARED"

    deps =
    [
        "//ABI/String",
        "//C++/LanguageSupport:LanguageSupport_headers",
        "//C++/Utility:Utility_headers"
    ]

    deps_shared =
    [
        "//ABI/C++:EhShim",
    ]

    public_headers =
    [
        "TLS.hh",
        
        "Private/Config.hh"
    ]

    if (current_arch == "arm")
    {
        public_headers +=
        [
            "Arch/ARM/TLS.hh",
        ]
    }
    if (current_arch == "mips") 
    {
        public_headers +=
        [
            "Arch/MIPS/TLS.hh",
        ]
    }
    else if (current_arch == "powerpc")
    {
        public_headers +=
        [
            "Arch/PowerPC/TLS.hh",
        ]
    }
    else if (current_arch == "sparc")
    {
        public_headers +=
        [
            "Arch/Sparc/TLS.hh",
        ]
    }
    else if (current_arch == "x86")
    {
        public_headers +=
        [
            "Arch/x86/TLS.hh"
        ]
    }

    sources =
    [
        "ImageInternal.hh",
        "Terminate.hh",
        "WeakMalloc.hh",

        "Image.cc",
    ]

    if (current_arch == "arm")
    {
        sources +=
        [
            "Arch/ARM/TLS.cc",
        ]

        if (arm_arch_major < 8)
        {
            sources +=
            [
                "Arch/ARM/TP.S",
            ]
        }
    }
    else if (current_arch == "mips")
    {
        sources +=
        [
            "Arch/MIPS/TLS.cc",
        ]
    }
    else if (current_arch == "powerpc")
    {
        sources +=
        [
            "Arch/PowerPC/TLS.cc",
        ]
    }
    else if (current_arch == "sparc")
    {
        sources +=
        [
            "Arch/Sparc/TLS.cc",
        ]
    }
    else if (current_arch == "x86")
    {
        sources +=
        [
            "Arch/x86/TLS.cc",
        ]
    }
    else
    {
        assert(false, "unsupported architecture: ${current_arch}")
    }
}
