import("//build/config/arch/current_arch_config.gni")

# Defaults for most of the sub-libraries.
deps =
[
    ":C++_headers",

    "//ABI/Integer:Integer",
    "//C++/LanguageSupport",
]

if (current_arch == "arm" && arm_arch_major >= 8)
{
    # ARMv8 builds with -moutline-atomics cause most of these to depend on the
    # ABI.Atomics library.
    deps +=
    [
        "//ABI/Atomic",
    ]
}

# Pre v8 ARM uses an ARM defined ABI rather than the usual SysV ABI.
if (current_arch == "arm" && arm_arch_major < 8)
{
    public_configs =
    [
        ":aeabi"
    ]
}

shared_define = "__SYSTEM_ABI_CXX_BUILD_SHARED"
is_source_set = true

library("AtExit")
{
    library_name    = "System.ABI.C++.AtExit"
    library_version = "0.1.0"

    use_stdlib = false

    sources =
    [
        "AtExit.cc",
    ]
}

library("Demangle")
{
    library_name    = "System.ABI.C++.Demangle"
    library_version = "0.1.0"

    use_stdlib = false

    deps +=
    [
        "//C++/Locale:MiniLocale",
    ]

    public_deps =
    [
        "//ABI/String",
        "//C++/Containers",
        "//C++/Format:Format_headers",
    ]

    sources =
    [
        "Demangle.cc",
    ]
}

library("EhPersonality")
{
    library_name    = "System.ABI.C++.EhPersonality"
    library_version = "0.1.0"

    use_stdlib = false

    deps +=
    [
        "//C++/Exception:Exception_headers",
    ]

    public_deps =
    [
        ":Unwind",

        "//ABI/Dwarf:Dwarf_headers",
    ]

    sources =
    [
        "Utils.hh",

        "GxxPersonality_v0.cc",
        "TypeMatch.cc",
    ]

    if (current_arch == "arm" && arm_arch_major < 8)
    {
        # ARM EHABI personality routines in addition to the GCC one.
        sources +=
        [
            "AEABI.cc",
        ]
    }
}

library("Exception")
{
    library_name    = "System.ABI.C++.Exception"
    library_version = "0.1.0"

    use_stdlib = false

    public_deps =
    [
        ":EhPersonality",
        ":RTTI",
        ":Unwind",

        "//ABI/TLS",
        "//C++/Atomic",
        "//C++/Exception:Exception_headers",
    ]

    sources =
    [
        "Utils.hh",

        "Exception.cc",
        "Terminate.cc",
        "Unexpected.cc",
    ]
}

library("Guard")
{
    library_name    = "System.ABI.C++.Guard"
    library_version = "0.1.0"

    use_stdlib = false

    sources =
    [
        "Guard.cc",
    ]
}

library("NewDelete")
{
    library_name    = "System.ABI.C++.NewDelete"
    library_version = "0.1.0"

    use_stdlib = false

    deps +=
    [
        "//C++/Atomic",
    ]

    sources =
    [
        "NewDelete.cc",
    ]
}

library("PriorityInit")
{
    library_name    = "System.ABI.C++.PriorityInit"
    library_version = "0.1.0"

    use_stdlib = false

    sources =
    [
        "PriorityInit.cc"
    ]
}

library("RTTI")
{
    library_name    = "System.ABI.C++.RTTI"
    library_version = "0.1.0"

    use_stdlib = false

    deps +=
    [
        "//C++/Utility:Utility_headers",
    ]

    sources =
    [
        "DynamicCast.cc",
        "TypeInfo.cc",
    ]
}

library("Unwind")
{
    library_name    = "System.ABI.C++.Unwind"
    library_version = "0.1.0"

    use_stdlib = false

    public_deps =
    [
        ":RTTI",
        ":Virtual",

        "//ABI/Dwarf:CFI",
        "//ABI/ExecContext",
        "//C++/Containers",
    ]

    defines = []

    sources =
    [
        "Unwinder.hh",

        "DwarfUnwinder.cc",
        "NullUnwinder.cc",
        "Unwind.cc",
        "Unwinder.cc",
    ]

    if (current_arch == "arm" && arm_arch_major < 8)
    {
        # The DWARF unwinder is not supported on 32-bit ARM.
        sources -=
        [
            "DwarfUnwinder.cc",
        ]
        
        # Include the ARM EHABI unwinder.
        sources +=
        [
            "Arch/ARM/EHABIUnwinder.cc",
        ]

        defines +=
        [
            "UNWIND_AEABI",
        ]
    }
}

library("VecCtor")
{
    library_name    = "System.ABI.C++.VecCtor"
    library_version = "0.1.0"

    use_stdlib = false

    sources =
    [
        "VecCtor.cc",
    ]
}

library("Virtual")
{
    library_name    = "System.ABI.C++.Virtual"
    library_version = "0.1.0"

    use_stdlib = false

    sources =
    [
        "DeletedVirtual.cc",
        "PureVirtual.cc",
    ]
}

library("C++")
{
    library_name    = "System.ABI.C++"
    library_version = "0.1.0"

    # TODO: fix compilers to look for "System.ABI.C++" and remove this.
    output_name = "System.ABI.C++.CRT"

    is_source_set = false
    header_only = false
    define_header_target = true
    use_stdlib = false

    public_headers =
    [
        "Demangle.hh",
        "DynamicCast.hh",
        "Exception.hh",
        "Guard.hh",
        "TypeInfo.hh",
        "Unwinder.hh",
        "VecCtor.hh",
        "Virtual.hh",
    ]

    header_deps =
    [
        "//C++/Atomic:Atomic_headers",
    ]

    public_deps =
    [
        ":AtExit",
        ":Demangle",
        ":EhPersonality",
        ":Exception",
        ":Guard",
        ":NewDelete",
        ":PriorityInit",
        ":RTTI",
        ":Unwind",
        
        "//ABI/Integer",
        "//ABI/String",
        "//ABI/TLS",
    ]
}

# Configuration applied when this library is building according to the ARM EABI
# (Embedded ARM ABI; despite the name, also used for non-embedded ARM targets).
config("aeabi")
{
    defines =
    [
        "__SYSTEM_ABI_CXX_AEABI"
    ]
}

# ARM EHABI workaround for libraries needing personality routine shims in
# order to link correctly (see the comment in EhPersonality/AEABIShim.cc for
# details).
library("EhShim")
{
    library_name    = "System.ABI.C++.EhShim"
    library_version = "0.1.0"

    include_prefix  = "System/ABI/C++/EhPersonality"

    is_source_set = true
    use_stdlib = false

    sources = []

    if (current_arch == "arm" && arm_arch_major < 8)
    {
        sources +=
        [
            "AEABIShim.cc",
        ]
    }
}
